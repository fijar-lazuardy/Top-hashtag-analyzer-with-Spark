version: '3.5'
services:
  spark-master:
    image: bde2020/spark-master:3.0.1-hadoop3.2
    container_name: spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    networks: 
      - spark-cluster
  spark-worker-1:
    image: bde2020/spark-worker:3.0.1-hadoop3.2
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    networks:
      - spark-cluster
  spark-worker-2:
    image: bde2020/spark-worker:3.0.1-hadoop3.2
    container_name: spark-worker-2
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    networks:
      - spark-cluster
  tweet_streamer:
    build:
      context: python-tweet-stream
      dockerfile: Dockerfile
    image: tweet_streamer
    container_name: tweet_streamer
    env_file:
      - .env
    environment:
      - "PYTHONUNBUFFERED=1"
      - "BEARER_TOKEN=${BEARER_TOKEN}"
    networks:
      - spark-cluster
  apache_stream:
    build:
      context: apache-stream
      dockerfile: Dockerfile
    image: apache_stream
    container_name: apache_stream
    environment:
      - "ENABLE_INIT_DAEMON=false"
    networks:
      - spark-cluster
    links:
      - "spark-master:spark-master"
#  mongo_db:
#    image: mongo
#    container_name: mongo_db
#    env_file:
#      - .env
#    environment:
#      - 'MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}'
#      - 'MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}'
#    ports:
#    - "27017:27017"
#    networks:
#      - spark-cluster
  flask-dashboard:
    build:
      context: flask-dashboard
      dockerfile: Dockerfile
    image: flask-dashboard
    container_name: flask-dashboard
    env_file:
      - .env
    ports:
    - "5000:5000"
    networks:
      - spark-cluster
networks:
  spark-cluster:
    name: spark-cluster
    driver: bridge